
#include "minishell.h"

// int	no_expansion_needed(char *s)
// {
// 	return (!ft_strchr(s, '$') && !ft_strchr(s, '\"') && !ft_strchr(s, '\''));
// }

// char	ft_quote(char *s)
// {
// 	while (*s)
// 	{
// 		if (*s == '\"' || *s == '\'')
// 			return (*s);
// 		s++;
// 	}
// 	return (0);
// }

// char	*ft_strldup(char *src, ptrdiff_t size)
// {
// 	char	*dup;
// 	int		i;

// 	i = 0;
// 	if (size <= 0 || !src)
// 		return (0);
// 	dup = malloc(size * sizeof(char));
// 	if (!dup)
// 		return (0);
// 	while (*src && i + 1 < size)
// 		dup[i++] = *src++;
// 	if (i < size)
// 		dup[i] = '\0';
// 	return (dup);
// }

// char	*extract_env(char *s)
// {
// 	char	*env_s;
// 	char	*extract;

// 	if (!s || !s[0])
// 		return (0);
// 	if (*s == '$')
// 		s++;
// 	env_s = s;
// 	while (*s && ft_isalnum(*s))
// 		s++;
// 	extract = ft_strldup(env_s, (s - env_s) + 1);
// 	return (extract);
// }

// size_t	expanded_len(char *s, char q)
// {
// 	size_t		env_len;
// 	char		*env;
// 	t_env_var	*env_token;

// 	env_len = 0;
// 	while (*s)
// 	{
// 		if (*s == '$' && q != '\"')
// 		{
// 			env = extract_env(++s);
// 			env_token = find_env_vars(env);
// 			if (!env_token)
// 				return (0);
// 			env_len += ft_strlen(env_token->value);
// 			s += ft_strlen(env);
// 			q = ft_quote(s);
// 			free(env);
// 		}
// 		else if (*s != q)
// 			env_len++;
// 		s++;
// 	}
// 	return (env_len);
// }

// void	cp_to_output(char *dst, char *src, char q)
// {
// 	size_t		env_len;
// 	size_t		copied;
// 	char		*env;
// 	t_env_var	*env_token;

// 	env_len = 0;
// 	while (*src)
// 	{
// 		if (*src == '$' && q != '\'')
// 		{
// 			env = extract_env(++src);
// 			env_token = find_env_vars(env);
// 			env_len = ft_strlen(env_token->value);
// 			copied = ft_strlcpy(dst, env_token->value, env_len + 1);
// 			src += ft_strlen(env);
// 			q = ft_quote(src);
// 			dst += copied;
// 			free(env);
// 		}
// 		if (*src != q)
// 			*dst++ = *src;
// 		src++;
// 	}
// 	*dst = '\0';
// }


// /**
//  * This function joins together all of the strings
//  * in `split` with no delimiters in between each
//  * string and frees up the array of strings
//  *
//  * @param split array of strings
//  * @returns concatatonation of all the strings in `split`
//  */
// char	*full_expansion(char *split)
// {
// 	char	*output;
// 	int		i;

// 	i = 0;
// 	while (split[++i])
// 	{
// 		output = ft_strfjoin(output, split[i]);
// 		if (split[i + 1] != NULL)
// 			output = ft_strfjoin(output, " ");
// 	}
// 	return (output);
// }


// char	*env_expansion(char **split_q, char *s)
// {
// 	char		*output;
// 	int			i;
// 	int			flag;

// 	i = -1;
// 	flag = 0;
// 	while (split_q[++i])
// 	{
// 		if (ft_strchr(split_q[i], '$'))
// 			split_q[i] = expanded(split_q[i]);
// 	}
// 	output = full_expansion(split_q);
// 	return (output);
// }

// char	*env_expansion(char **split)
// {
// 	char	*output;
// 	char	*expanded;
// 	size_t	i;

// 	i = -1;

// 	while (split[++i])
// 	{
// 		if (no_expansion_needed(split[i]))
// 			continue ;
// 		else
// 		{
// 			expanded = env_expansion(ft_splitq(split[i], '\''), split[i]);
// 			free(split[i]);
// 			split[i] = expanded;
// 		}
// 	}
// 	output = full_expansion(split, 1);
// 	return (output);
// }

char	*expand_dollar(char *input)
{
	char	*output;
	char	*env_value;
	char	*tmp;
	int		start;
	int		i;
	int		j;

	i = 0;
	j = 0;
	output = (char *)malloc(sizeof(char) * (ft_strlen(input) + 1));
	if (!output)
		return (NULL);
	while (input[i])
	{
		if (input[i] == '$')
		{
			i++;
			if (input[i] == '(')
			{
				while (input[i] && input[i] != ')')
					i++;
				i++;
			}
			else
			{
				start = i;
				while (input[i] && ft_isalnum(input[i]))
					i++;
				tmp = ft_substr(input, start, i - start);
				if (find_env_vars(tmp) != NULL)
					env_value = find_env_vars(tmp)->value;
				else
					env_value = "";
				free(tmp);
				ft_strlcpy(output + j, env_value, ft_strlen(env_value) + 1);
				j += ft_strlen(env_value);
			}
		}
		else
			output[j++] = input[i++];
	}
	output[j] = '\0';
	// free(input);
	return (output);
}

// void    expand_dollar(t_token **tokens)
// {
//     t_token    *current_node;
//     char    *env_value;
//     char    *tmp;

//     current_node = *tokens;
//     while (current_node)
//     {
//         if (current_node->type == DOLLAR)
//         {
//             tmp = ft_strtrim(current_node->cmd, "$");
//             if (tmp[0] == '(')
//             {
//                 free(tmp);
//                 return ;
//             }
//             if (find_env_vars(tmp) != NULL)
//                 env_value = find_env_vars(tmp)->value;
//             else
//                 env_value = "";
//             free(tmp);
//             free(current_node->cmd);
//             current_node->cmd = ft_strdup(env_value);
// 			current_node->type = CMD;
//         }
//         current_node = current_node->next;
//     }
// }
